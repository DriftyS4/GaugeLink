
import java.util.concurrent.TimeUnit;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Joseph
 */
public class gaugeForm extends javax.swing.JFrame {

    /**
     * Creates new form gaugeForm
     */
    int x = 0;
    int boost = 0;
    public gaugeForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        throttleButton = new javax.swing.JButton();
        rpm = new javax.swing.JLabel();
        vtecdisplay = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        psiLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        throttleButton.setText("Throttle");
        throttleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                throttleButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                throttleButtonMouseReleased(evt);
            }
        });

        rpm.setText("RPM");

        jLabel1.setText("Boost");
        jLabel1.setName("Boost"); // NOI18N

        psiLabel.setText("PSI");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(throttleButton)
                .addGap(51, 51, 51))
            .addGroup(layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(psiLabel)
                    .addComponent(jLabel1)
                    .addComponent(vtecdisplay)
                    .addComponent(rpm))
                .addContainerGap(226, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(vtecdisplay)
                .addGap(18, 18, 18)
                .addComponent(rpm)
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(psiLabel)
                .addGap(26, 26, 26)
                .addComponent(throttleButton)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private boolean mouseDown = false;
    private void throttleButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_throttleButtonMousePressed
        // TODO add your handling code here:
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        mouseDown = true;
        initThread();
    }
    }//GEN-LAST:event_throttleButtonMousePressed

    private void throttleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_throttleButtonMouseReleased
        // TODO add your handling code here:
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON1) {
        mouseDown = false;
        //initThread();
    }
    }//GEN-LAST:event_throttleButtonMouseReleased


private boolean isRunning = false;
private synchronized boolean checkAndMark() {
    if (isRunning) return false;
    isRunning = true;
    return true;
}
String rpmIncrease;
String rpmDecrease;
String boostIncrease;
String boostDecrease;
private void initThread() {
    if (checkAndMark()) {
        new Thread() {
            public void run() {
                do {
                    //do something
                    try {
                        Thread.sleep(1);                //1000 milliseconds is one second.
                    } catch (InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                    x+=2;
                    if (x > 6000)
                    {
                        vtecdisplay.setText("VTEC!");
                        x+=4;
                    }
                    
                    
                    
                    if (x > 10000)
                        x = 9600;
                    
                    rpmIncrease = Integer.toString(x);
                    rpm.setText(rpmIncrease + " RPM");
                    
                    boost++;
                    if (boost > 20)
                    boost = 20;
                    
                    boostIncrease = Integer.toString(boost);
                    psiLabel.setText(boostIncrease + "PSI");
                    
                    
                } while (mouseDown);
                isRunning = false;
                    do {
                        try {
                            Thread.sleep(1);                //1000 milliseconds is one second.
                        } catch (InterruptedException ex) {
                            Thread.currentThread().interrupt();
                        }
                        x-=2;
                        rpmDecrease = Integer.toString(x);
                        rpm.setText(rpmDecrease + " RPM");
                        if (x < 6000)
                            vtecdisplay.setText("");
                       // System.out.println("lowerRPM " + x);
                        if (x <= 800) {
                            break;
                        } 
                        
                        boost--;
                    if (boost < -25)
                    boost = -25;
                    
                    boostDecrease = Integer.toString(boost);
                    psiLabel.setText(boostDecrease + "PSI");
                        
                    }while (mouseDown == false);
                
                  
            }
        }.start();
    }
}



    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gaugeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gaugeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gaugeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gaugeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gaugeForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel psiLabel;
    private javax.swing.JLabel rpm;
    private javax.swing.JButton throttleButton;
    private javax.swing.JLabel vtecdisplay;
    // End of variables declaration//GEN-END:variables
}
